server:
  port: ${REWARD_NOTIFICATION_PORT:8080}

reactor:
  bufferSize:
    small: ${REACTOR_BUFFER_SIZE:256}

spring:
  application:
    name: idpay-reward-notification
  jmx.enabled: true
  config:
    activate:
      on-profile: default
  cloud:
    stream:
      function:
        definition: rewardNotificationConsumer
      bindings:
        rewardNotificationConsumer-in-0:
          destination: ${KAFKA_REWARD_NOTIFICATION_RULE_TOPIC:idpay-transaction-rule-update}
          group: ${KAFKA_REWARD_NOTIFICATION_RULE_GROUP_ID:idpay-reward-notification-consumer-group}
          content-type: ${KAFKA_CONTENT_TYPE:application/json}
          binder: kafka-idpay-rule
      binders:
        kafka-idpay-rule:
          type: kafka
          environment:
            spring.cloud.stream.kafka.binder:
              brokers: ${KAFKA_REWARD_NOTIFICATION_RULE_BROKER:${KAFKA_BROKER:}}
              configuration.sasl.jaas.config: ${KAFKA_REWARD_NOTIFICATION_RULE_SASL_JAAS_CONFIG:}
      kafka:
        binder:
          auto-create-topics: false
          configuration:
            heartbeat.interval.ms: ${KAFKA_CONFIG_HEARTBEAT_INTERVAL_MS:30000}
            session.timeout.ms: ${KAFKA_CONFIG_SESSION_TIMEOUT_MS:60000}
            request.timeout.ms: ${KAFKA_CONFIG_REQUEST_TIMEOUT_MS:60000}
            sasl.mechanism: ${KAFKA_CONFIG_SASL_MECHANISM:PLAIN}
            security.protocol: ${KAFKA_CONFIG_SECURITY_PROTOCOL:SASL_SSL}
        bindings:
          trxProcessor-in-0:
            consumer:
              startOffset: ${KAFKA_REWARD_NOTIFICATION_RULE_START_OFFSET:${KAFKA_CONSUMER_CONFIG_START_OFFSET:earliest}}
              autoCommitOffset: false
              ackMode: MANUAL_IMMEDIATE
              ackTime: ${KAFKA_REWARD_NOTIFICATION_RULE_ACK_MILLIS:10000}
              standardHeaders: ${KAFKA_REWARD_NOTIFICATION_RULE_STANDARD_HEADERS:${KAFKA_CONSUMER_CONFIG_STANDARD_HEADERS:both}}
              configuration:
                max.poll:
                  records: ${KAFKA_REWARD_NOTIFICATION_RULE_MAX_POLL_SIZE:${KAFKA_CONSUMER_CONFIG_MAX_POLL_SIZE:500}}
                  interval.ms: ${KAFKA_REWARD_NOTIFICATION_RULE_INTERVAL_TIMEOUT_MS:${KAFKA_CONFIG_MAX_POLL_INTERVAL_TIMEOUT_MS:300000}}
                connections.max.idle.ms: ${KAFKA_REWARD_NOTIFICATION_RULE_CONNECTIONS_MAX_IDLE_MS:${KAFKA_CONSUMER_CONFIG_CONNECTIONS_MAX_IDLE_MS:300000}}
                socket.connection.setup.timeout:
                  max.ms: ${KAFKA_REWARD_NOTIFICATION_RULE_CONNECTION_TIMEOUT_MAX_MS:${KAFKA_CONSUMER_CONFIG_CONNECTION_TIMEOUT_MAX_MS:200000}}
                  ms: ${KAFKA_REWARD_NOTIFICATION_RULE_CONNECTION_TIMEOUT_MS:${KAFKA_CONSUMER_CONFIG_CONNECTION_TIMEOUT_MS:100000}}

  data:
    mongodb:
      uri: ${MONGODB_URI:mongodb://localhost:27017}
      database: ${MONGODB_DBNAME:idpay}

logging:
  level:
    root: ${LOG_LEVEL_ROOT:INFO}
    it.gov.pagopa: ${LOG_LEVEL_PAGOPA:INFO}
    it.gov.pagopa.reward.notification: ${LOG_LEVEL_REWARD_NOTIFICATION:INFO}
    org.springframework.integration: ${LOG_LEVEL_SPRING_INTEGRATION:INFO}
    org.springframework.security: ${LOG_LEVEL_SPRING_SECURITY:INFO}
    org.springframework.ws: ${LOG_LEVEL_SPRING_WS:INFO}
    org.springframework.cloud: ${LOG_LEVEL_SPRING_CLOUD:WARN}
    org.springframework.data: ${LOG_LEVEL_SPRING_DATA:INFO}
    org.springframework.hateoas: ${LOG_LEVEL_SPRING_HATEOAS:INFO}
    org.springframework.boot: ${LOG_LEVEL_SPRING_BOOT:INFO}
    org.springframework.kafka: ${LOG_LEVEL_SPRING_KAFKA:INFO}
    org.springframework.batch: ${LOG_LEVEL_SPRING_BATCH:INFO}
    io.swagger: ${LOG_LEVEL_IO_SWAGGER:WARN}
    javax.persistence: ${LOG_LEVEL_JAVAX_PERSISTENCE:INFO}
    org.hibernate: ${LOG_LEVEL_ORG_HIBERNATE:INFO}
    org.kie: ${LOG_LEVEL_ORG_KIE:WARN}
    org.drools: ${LOG_LEVEL_ORG_DROOLS:WARN}
    org.mongodb.driver: ${LOG_LEVEL_MONGODB_DRIVER:WARN}

app:
  # A feature to guarantee the execution order of the trx having the same userId
  trx-lock:
    # the size of the locks bucket
    bucket-size: ${TRX_LOCK_BUCKET_SIZE:1000}
    # the maximum seconds to wait before to continue even if the lock is acquired
    timeout: ${TRX_LOCK_SECONDS_TIMEOUT:180}
  threads:
    schedule-max-number: ${THREADS_SCHEDULE_MAX_NUMBER:1}

