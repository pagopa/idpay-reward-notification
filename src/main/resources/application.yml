server:
  port: ${REWARD_NOTIFICATION_PORT:8080}

reactor:
  bufferSize:
    small: ${REACTOR_BUFFER_SIZE:256}

spring:
  application:
    name: "@project.artifactId@"
    version: "@project.version@"
  jmx.enabled: true
  config:
    activate:
      on-profile: default
  cloud:
    stream:
      function:
        definition: refundRuleConsumer;rewardTrxConsumer;ibanOutcomeConsumer;rewardNotificationUploadConsumer;rewardNotificationFeedback;errors
      bindings:
        refundRuleConsumer-in-0:
          destination: ${KAFKA_REFUND_RULE_REQUEST_TOPIC:idpay-transaction-rule-update}
          group: ${KAFKA_REFUND_RULE_REQUEST_GROUP_ID:idpay-rewards-notification-rule}
          content-type: ${KAFKA_CONTENT_TYPE:application/json}
          binder: kafka-idpay-rule
        rewardTrxConsumer-in-0:
          destination: ${KAFKA_REWARD_RESPONSE_TOPIC:idpay-transaction}
          group: ${KAFKA_REWARD_RESPONSE_GROUP_ID:idpay-rewards-notification}
          content-type: ${KAFKA_CONTENT_TYPE:application/json}
          binder: kafka-rewarded-transactions
        ibanOutcomeConsumer-in-0:
          destination: ${KAFKA_CHECKIBAN_OUTCOME_TOPIC:idpay-checkiban-outcome}
          group: ${KAFKA_CHECKIBAN_OUTCOME_GROUP_ID:idpay-rewards-notification-iban-outcome}
          content-type: ${KAFKA_CONTENT_TYPE:application/json}
          binder: kafka-checkiban-outcome
        errors-out-0:
          destination: ${KAFKA_ERRORS_TOPIC:idpay-errors}
          content-type: ${KAFKA_CONTENT_TYPE:application/json}
          binder: kafka-errors
        rewardNotificationUploadConsumer-in-0:
          destination: ${KAFKA_REWARD_NOTIFICATION_UPLOAD_TOPIC:idpay-reward-notification-storage-events}
          group: ${KAFKA_REWARD_NOTIFICATION_UPLOAD_GROUP_ID:idpay-reward-notification-storage-group}
          content-type: ${KAFKA_CONTENT_TYPE:application/json}
          binder: kafka-reward-notification-upload
        rewardNotificationFeedback-out-0:
          destination: ${KAFKA_REWARD_NOTIFICATION_FEEDBACK_TOPIC:idpay-reward-notification-response}
          content-type: ${KAFKA_CONTENT_TYPE:application/json}
          binder: kafka-reward-notification-feedback
      binders:
        kafka-idpay-rule:
          type: kafka
          environment:
            spring.cloud.stream.kafka.binder:
              brokers: ${KAFKA_REFUND_RULE_REQUEST_BROKER:${KAFKA_BROKER:}}
              configuration.sasl.jaas.config: ${KAFKA_REFUND_RULE_REQUEST_SASL_JAAS_CONFIG:}
        kafka-rewarded-transactions:
          type: kafka
          environment:
            spring.cloud.stream.kafka.binder:
              brokers: ${KAFKA_REWARD_RESPONSE_BROKER:${KAFKA_BROKER:}}
              configuration:
                sasl.jaas.config: ${REWARD_RESPONSE_SASL_JAAS_CONFIG:}
        kafka-checkiban-outcome:
          type: kafka
          environment:
            spring.cloud.stream.kafka.binder:
              brokers: ${KAFKA_CHECKIBAN_OUTCOME_BROKER:${KAFKA_BROKER:}}
              configuration.sasl.jaas.config: ${KAFKA_CHECKIBAN_OUTCOME_SASL_JAAS_CONFIG:}
        kafka-errors:
          type: kafka
          environment:
            spring.cloud.stream.kafka.binder:
              brokers: ${KAFKA_ERRORS_BROKER:${KAFKA_BROKER:}}
              configuration:
                sasl.jaas.config: ${KAFKA_ERRORS_SASL_JAAS_CONFIG:}
                key.serializer: org.apache.kafka.common.serialization.StringSerializer
        kafka-reward-notification-upload:
          type: kafka
          environment:
            spring.cloud.stream.kafka.binder:
              brokers: ${KAFKA_REWARD_NOTIFICATION_UPLOAD_BROKER:${KAFKA_BROKER:}}
              configuration.sasl.jaas.config: ${KAFKA_REWARD_NOTIFICATION_UPLOAD_SASL_JAAS_CONFIG:}
        kafka-reward-notification-feedback:
          type: kafka
          environment:
            spring.cloud.stream.kafka.binder:
              brokers: ${KAFKA_REWARD_NOTIFICATION_FEEDBACK_BROKER:${KAFKA_BROKER:}}
              configuration:
                sasl.jaas.config: ${KAFKA_REWARD_NOTIFICATION_FEEDBACK_SASL_JAAS_CONFIG:}
                key.serializer: org.apache.kafka.common.serialization.StringSerializer
      kafka:
        binder:
          auto-create-topics: false
          configuration:
            heartbeat.interval.ms: ${KAFKA_CONFIG_HEARTBEAT_INTERVAL_MS:3000}
            session.timeout.ms: ${KAFKA_CONFIG_SESSION_TIMEOUT_MS:60000}
            request.timeout.ms: ${KAFKA_CONFIG_REQUEST_TIMEOUT_MS:60000}
            sasl.mechanism: ${KAFKA_CONFIG_SASL_MECHANISM:PLAIN}
            security.protocol: ${KAFKA_CONFIG_SECURITY_PROTOCOL:SASL_SSL}
            connections.max.idle.ms: ${KAFKA_CONFIG_CONNECTION_MAX_IDLE_TIME:180000}
            metadata.max.idle.ms: ${KAFKA_CONFIG_METADATA_MAX_IDLE_MS:180000}
            metadata.max.age.ms: ${KAFKA_CONFIG_METADATA_MAX_AGE_INTERVAL:179000}
            max.request.size: ${KAFKA_CONFIG_METADATA_MAX_REQUEST_SIZE:1000000}
        bindings:
          refundRuleConsumer-in-0:
            consumer:
              startOffset: ${KAFKA_REFUND_RULE_REQUEST_START_OFFSET:${KAFKA_CONSUMER_CONFIG_START_OFFSET:earliest}}
              autoCommitOffset: false
              ackMode: MANUAL_IMMEDIATE
              ackTime: ${KAFKA_REFUND_RULE_REQUEST_ACK_MILLIS:500}
              standardHeaders: ${KAFKA_REFUND_RULE_REQUEST_STANDARD_HEADERS:${KAFKA_CONSUMER_CONFIG_STANDARD_HEADERS:both}}
              configuration:
                max.poll:
                  records: ${KAFKA_REFUND_RULE_REQUEST_MAX_POLL_SIZE:${KAFKA_CONSUMER_CONFIG_MAX_POLL_SIZE:500}}
                  interval.ms: ${KAFKA_REFUND_RULE_REQUEST_INTERVAL_TIMEOUT_MS:${KAFKA_CONFIG_MAX_POLL_INTERVAL_TIMEOUT_MS:300000}}
                connections.max.idle.ms: ${KAFKA_REFUND_RULE_REQUEST_CONNECTIONS_MAX_IDLE_MS:${KAFKA_CONSUMER_CONFIG_CONNECTIONS_MAX_IDLE_MS:180000}}
                socket.connection.setup.timeout:
                  max.ms: ${KAFKA_REFUND_RULE_REQUEST_CONNECTION_TIMEOUT_MAX_MS:${KAFKA_CONSUMER_CONFIG_CONNECTION_TIMEOUT_MAX_MS:200000}}
                  ms: ${KAFKA_REFUND_RULE_REQUEST_CONNECTION_TIMEOUT_MS:${KAFKA_CONSUMER_CONFIG_CONNECTION_TIMEOUT_MS:100000}}
          rewardTrxConsumer-in-0:
            consumer:
              startOffset: ${KAFKA_REWARD_RESPONSE_REQUEST_START_OFFSET:${KAFKA_CONSUMER_CONFIG_START_OFFSET:earliest}}
              autoCommitOffset: false
              ackMode: MANUAL_IMMEDIATE
              ackTime: ${KAFKA_REWARD_RESPONSE_REQUEST_ACK_MILLIS:500}
              standardHeaders: ${KAFKA_REWARD_RESPONSE_REQUEST_STANDARD_HEADERS:${KAFKA_CONSUMER_CONFIG_STANDARD_HEADERS:both}}
              configuration:
                max.poll:
                  records: ${KAFKA_REWARD_RESPONSE_REQUEST_MAX_POLL_SIZE:${KAFKA_CONSUMER_CONFIG_MAX_POLL_SIZE:500}}
                  interval.ms: ${KAFKA_REWARD_RESPONSE_REQUEST_INTERVAL_TIMEOUT_MS:${KAFKA_CONFIG_MAX_POLL_INTERVAL_TIMEOUT_MS:300000}}
                connections.max.idle.ms: ${KAFKA_REWARD_RESPONSE_REQUEST_CONNECTIONS_MAX_IDLE_MS:${KAFKA_CONSUMER_CONFIG_CONNECTIONS_MAX_IDLE_MS:180000}}
                socket.connection.setup.timeout:
                  max.ms: ${KAFKA_REWARD_RESPONSE_REQUEST_CONNECTION_TIMEOUT_MAX_MS:${KAFKA_CONSUMER_CONFIG_CONNECTION_TIMEOUT_MAX_MS:200000}}
                  ms: ${KAFKA_REWARD_RESPONSE_REQUEST_CONNECTION_TIMEOUT_MS:${KAFKA_CONSUMER_CONFIG_CONNECTION_TIMEOUT_MS:100000}}
          ibanOutcomeConsumer-in-0:
            consumer:
              startOffset: ${KAFKA_CHECKIBAN_OUTCOME_START_OFFSET:${KAFKA_CONSUMER_CONFIG_START_OFFSET:earliest}}
              autoCommitOffset: false
              ackMode: MANUAL_IMMEDIATE
              ackTime: ${KAFKA_CHECKIBAN_OUTCOME_ACK_MILLIS:500}
              standardHeaders: ${KAFKA_CHECKIBAN_OUTCOME_STANDARD_HEADERS:${KAFKA_CONSUMER_CONFIG_STANDARD_HEADERS:both}}
              configuration:
                max.poll:
                  records: ${KAFKA_CHECKIBAN_OUTCOME_MAX_POLL_SIZE:${KAFKA_CONSUMER_CONFIG_MAX_POLL_SIZE:500}}
                  interval.ms: ${KAFKA_CHECKIBAN_OUTCOME_INTERVAL_TIMEOUT_MS:${KAFKA_CONFIG_MAX_POLL_INTERVAL_TIMEOUT_MS:300000}}
                connections.max.idle.ms: ${KAFKA_CHECKIBAN_OUTCOME_CONNECTIONS_MAX_IDLE_MS:${KAFKA_CONSUMER_CONFIG_CONNECTIONS_MAX_IDLE_MS:180000}}
                socket.connection.setup.timeout:
                  max.ms: ${KAFKA_CHECKIBAN_OUTCOME_CONNECTION_TIMEOUT_MAX_MS:${KAFKA_CONSUMER_CONFIG_CONNECTION_TIMEOUT_MAX_MS:200000}}
                  ms: ${KAFKA_CHECKIBAN_OUTCOME_CONNECTION_TIMEOUT_MS:${KAFKA_CONSUMER_CONFIG_CONNECTION_TIMEOUT_MS:100000}}
          errors-out-0:
            producer:
              configuration:
                client.id: rewardNotification-errors
                connections.max.idle.ms: ${KAFKA_ERRORS_CONNECTION_MAX_IDLE_TIME:180000}
                retry.backoff.ms: ${KAFKA_ERRORS_KAFKA_RETRY_MS:${KAFKA_RETRY_MS:10000}}
                linger.ms: ${KAFKA_ERRORS_LINGER_MS:${KAFKA_LINGER_MS:2}}
                batch.size: ${KAFKA_ERRORS_BATCH_SIZE:${KAFKA_BATCH_SIZE:16384}}
          rewardNotificationUploadConsumer-in-0:
            consumer:
              startOffset: ${KAFKA_REWARD_NOTIFICATION_UPLOAD_START_OFFSET:${KAFKA_CONSUMER_CONFIG_START_OFFSET:earliest}}
              autoCommitOffset: false
              ackMode: MANUAL_IMMEDIATE
              ackTime: ${KAFKA_REWARD_NOTIFICATION_UPLOAD_ACK_MILLIS:500}
              standardHeaders: ${KAFKA_REWARD_NOTIFICATION_UPLOAD_STANDARD_HEADERS:${KAFKA_CONSUMER_CONFIG_STANDARD_HEADERS:both}}
              configuration:
                max.poll:
                  records: ${KAFKA_REWARD_NOTIFICATION_UPLOAD_MAX_POLL_SIZE:${KAFKA_CONSUMER_CONFIG_MAX_POLL_SIZE:500}}
                  interval.ms: ${KAFKA_REWARD_NOTIFICATION_UPLOAD_INTERVAL_TIMEOUT_MS:${KAFKA_CONFIG_MAX_POLL_INTERVAL_TIMEOUT_MS:300000}}
                connections.max.idle.ms: ${KAFKA_REWARD_NOTIFICATION_UPLOAD_CONNECTIONS_MAX_IDLE_MS:${KAFKA_CONSUMER_CONFIG_CONNECTIONS_MAX_IDLE_MS:180000}}
                socket.connection.setup.timeout:
                  max.ms: ${KAFKA_REWARD_NOTIFICATION_UPLOAD_CONNECTION_TIMEOUT_MAX_MS:${KAFKA_CONSUMER_CONFIG_CONNECTION_TIMEOUT_MAX_MS:200000}}
                  ms: ${KAFKA_REWARD_NOTIFICATION_UPLOAD_CONNECTION_TIMEOUT_MS:${KAFKA_CONSUMER_CONFIG_CONNECTION_TIMEOUT_MS:100000}}
          rewardNotificationFeedback-out-0:
            producer:
              configuration:
                client.id: rewardNotificationFeedbackProducer
                connections.max.idle.ms: ${KAFKA_REWARD_NOTIFICATION_FEEDBACK_CONNECTION_MAX_IDLE_TIME:180000}
                retry.backoff.ms: ${KAFKA_REWARD_NOTIFICATION_FEEDBACK_KAFKA_RETRY_MS:${KAFKA_RETRY_MS:10000}}
                linger.ms: ${KAFKA_REWARD_NOTIFICATION_FEEDBACK_LINGER_MS:${KAFKA_LINGER_MS:2}}
                batch.size: ${KAFKA_REWARD_NOTIFICATION_FEEDBACK_BATCH_SIZE:${KAFKA_BATCH_SIZE:16384}}

  data:
    mongodb:
      uri: ${MONGODB_URI:mongodb://localhost:27017}
      database: ${MONGODB_DBNAME:idpay}
      # custom configured properties
      config:
        connectionPool:
          maxSize: ${MONGODB_CONNECTIONPOOL_MAX_SIZE:100}
          minSize: ${MONGODB_CONNECTIONPOOL_MIN_SIZE:5}
          maxWaitTimeMS: ${MONGODB_CONNECTIONPOOL_MAX_WAIT_MS:120000}
          maxConnectionLifeTimeMS: ${MONGODB_CONNECTIONPOOL_MAX_CONNECTION_LIFE_MS:0}
          maxConnectionIdleTimeMS: ${MONGODB_CONNECTIONPOOL_MAX_CONNECTION_IDLE_MS:120000}
          maxConnecting: ${MONGODB_CONNECTIONPOOL_MAX_CONNECTING:2}

management.endpoints:
  web:
    exposure.include: info, health

logging:
  level:
    root: ${LOG_LEVEL_ROOT:INFO}
    it.gov.pagopa: ${LOG_LEVEL_PAGOPA:INFO}
    it.gov.pagopa.reward.notification: ${LOG_LEVEL_REWARD_NOTIFICATION:INFO}
    org.springframework.integration: ${LOG_LEVEL_SPRING_INTEGRATION:INFO}
    org.springframework.security: ${LOG_LEVEL_SPRING_SECURITY:INFO}
    org.springframework.ws: ${LOG_LEVEL_SPRING_WS:INFO}
    org.springframework.cloud: ${LOG_LEVEL_SPRING_CLOUD:WARN}
    org.springframework.data: ${LOG_LEVEL_SPRING_DATA:INFO}
    org.springframework.hateoas: ${LOG_LEVEL_SPRING_HATEOAS:INFO}
    org.springframework.boot: ${LOG_LEVEL_SPRING_BOOT:INFO}
    org.springframework.kafka: ${LOG_LEVEL_SPRING_KAFKA:INFO}
    org.springframework.batch: ${LOG_LEVEL_SPRING_BATCH:INFO}
    io.swagger: ${LOG_LEVEL_IO_SWAGGER:WARN}
    javax.persistence: ${LOG_LEVEL_JAVAX_PERSISTENCE:INFO}
    org.hibernate: ${LOG_LEVEL_ORG_HIBERNATE:INFO}
    org.kie: ${LOG_LEVEL_ORG_KIE:WARN}
    org.drools: ${LOG_LEVEL_ORG_DROOLS:WARN}
    org.mongodb.driver: ${LOG_LEVEL_MONGODB_DRIVER:WARN}
    org.apache.commons:.beanutils.converters: ${LOG_LEVEL_APACHE_COMMON_BEANUTILS_CONVERTERS:WARN}

app:
  # A feature to guarantee the execution order of the trx having the same userId
  trx-lock:
    # the size of the locks bucket
    bucket-size: ${TRX_LOCK_BUCKET_SIZE:1000}
    # the maximum seconds to wait before to continue even if the lock is acquired
    timeout: ${TRX_LOCK_SECONDS_TIMEOUT:180}
  threads:
    schedule-max-number: ${THREADS_SCHEDULE_MAX_NUMBER:1}
  rewards-notification:
    weekly-notification-day: ${REWARDS_NOTIFICATION_WEEKLY_NOTIFICATION_DAY:MONDAY}
    # TOMORROW or 'NEXT_' followed by the day of week
    threshold-notification-day: ${REWARDS_NOTIFICATION_THRESHOLD_NOTIFICATION_DAY:NEXT_MONDAY}
    expired-initiatives:
      day-before: ${REWARDS_NOTIFICATION_EXPIRED_INITIATIVES_DAY_BEFORE:7}
      schedule: ${EXPIRED_INITIATIVES_SCHEDULE:0 0 5 * * ?}
  csv:
    tmp-dir: ${CSV_TEMP_DIR:/tmp}
    storage:
      connection-string: ${EXPORT_AZURE_STORAGE_CONNECTION_STRING:UseDevelopmentStorage=true;}
      blob-container-name: ${EXPORT_AZURE_STORAGE_BLOB_CONTAINER_NAME:refund}
      base-path: ${EXPORT_BASE_PATH:rewards/notifications}
    export:
      schedule: ${SCHEDULE_EXPORT_CSV:0 0 1 * * ?} # each day at 01:00AM
      # days before current to search rewardNotification to export
      day-before: ${EXPORT_CSV_DAY_BEFORE:7}
      # column separator to use when exporting csv
      separator: ${EXPORT_CSV_SEPARATOR:${CSV_SEPARATOR:;}}
      # The maximum number of rows to store in each csv
      split-size: ${EXPORT_CSV_SPLIT_SIZE:500000}
    import:
      # column separator to use when importing csv
      separator: ${IMPORT_CSV_SEPARATOR:${CSV_SEPARATOR:;}}
  pdv:
    base-url: ${PDV_BASE_URL:https://api.uat.tokenizer.pdv.pagopa.it/tokenizer/v1}
    headers:
      x-api-key: ${PDV_DECRYPT_API_KEY:x_api_key}
    retry:
      delay-millis: ${PDV_RETRY_DELAY_MILLIS:2000}
      max-attempts: ${PDV_RETRY_MAX_ATTEMPTS:${RETRY_MAX_ATTEMPTS:10}}
  web-client:
    connect.timeout.millis: ${CONNECT_TIMEOUT_MILLIS:10000}
    response.timeout: ${RESPONSE_TIMEOUT:60000}
    read.handler.timeout: ${READ_TIMEOUT_HANDLER:60000}
    write.handler.timeout: ${WRITE_TIMEOUT_HANDLER:60000}
  email-notification:
    delimiter: ${$EMAIL_NOTIFICATION_DELIMITER:,}
    base-url: ${EMAIL_NOTIFICATION_BASE_URL:/idpay/email-notification}
  selc:
    base-url: ${SELC_BASE_URL:/external/v1}
    headers:
      subscription-key: ${SELC_EXTERNAL_API_KEY:}
      uid: ${SELC_UID:idpay}
